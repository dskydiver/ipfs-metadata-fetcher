// Code generated by ent, DO NOT EDIT.

package metadata

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/dskydiver/ipfs-metadata-fetcher/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Metadata {
	return predicate.Metadata(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Metadata {
	return predicate.Metadata(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Metadata {
	return predicate.Metadata(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Metadata {
	return predicate.Metadata(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Metadata {
	return predicate.Metadata(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Metadata {
	return predicate.Metadata(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Metadata {
	return predicate.Metadata(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Metadata {
	return predicate.Metadata(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Metadata {
	return predicate.Metadata(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Metadata {
	return predicate.Metadata(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Metadata {
	return predicate.Metadata(sql.FieldContainsFold(FieldID, id))
}

// Cid applies equality check predicate on the "cid" field. It's identical to CidEQ.
func Cid(v string) predicate.Metadata {
	return predicate.Metadata(sql.FieldEQ(FieldCid, v))
}

// Image applies equality check predicate on the "image" field. It's identical to ImageEQ.
func Image(v string) predicate.Metadata {
	return predicate.Metadata(sql.FieldEQ(FieldImage, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Metadata {
	return predicate.Metadata(sql.FieldEQ(FieldDescription, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Metadata {
	return predicate.Metadata(sql.FieldEQ(FieldName, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Metadata {
	return predicate.Metadata(sql.FieldEQ(FieldCreatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Metadata {
	return predicate.Metadata(sql.FieldEQ(FieldDeletedAt, v))
}

// CidEQ applies the EQ predicate on the "cid" field.
func CidEQ(v string) predicate.Metadata {
	return predicate.Metadata(sql.FieldEQ(FieldCid, v))
}

// CidNEQ applies the NEQ predicate on the "cid" field.
func CidNEQ(v string) predicate.Metadata {
	return predicate.Metadata(sql.FieldNEQ(FieldCid, v))
}

// CidIn applies the In predicate on the "cid" field.
func CidIn(vs ...string) predicate.Metadata {
	return predicate.Metadata(sql.FieldIn(FieldCid, vs...))
}

// CidNotIn applies the NotIn predicate on the "cid" field.
func CidNotIn(vs ...string) predicate.Metadata {
	return predicate.Metadata(sql.FieldNotIn(FieldCid, vs...))
}

// CidGT applies the GT predicate on the "cid" field.
func CidGT(v string) predicate.Metadata {
	return predicate.Metadata(sql.FieldGT(FieldCid, v))
}

// CidGTE applies the GTE predicate on the "cid" field.
func CidGTE(v string) predicate.Metadata {
	return predicate.Metadata(sql.FieldGTE(FieldCid, v))
}

// CidLT applies the LT predicate on the "cid" field.
func CidLT(v string) predicate.Metadata {
	return predicate.Metadata(sql.FieldLT(FieldCid, v))
}

// CidLTE applies the LTE predicate on the "cid" field.
func CidLTE(v string) predicate.Metadata {
	return predicate.Metadata(sql.FieldLTE(FieldCid, v))
}

// CidContains applies the Contains predicate on the "cid" field.
func CidContains(v string) predicate.Metadata {
	return predicate.Metadata(sql.FieldContains(FieldCid, v))
}

// CidHasPrefix applies the HasPrefix predicate on the "cid" field.
func CidHasPrefix(v string) predicate.Metadata {
	return predicate.Metadata(sql.FieldHasPrefix(FieldCid, v))
}

// CidHasSuffix applies the HasSuffix predicate on the "cid" field.
func CidHasSuffix(v string) predicate.Metadata {
	return predicate.Metadata(sql.FieldHasSuffix(FieldCid, v))
}

// CidEqualFold applies the EqualFold predicate on the "cid" field.
func CidEqualFold(v string) predicate.Metadata {
	return predicate.Metadata(sql.FieldEqualFold(FieldCid, v))
}

// CidContainsFold applies the ContainsFold predicate on the "cid" field.
func CidContainsFold(v string) predicate.Metadata {
	return predicate.Metadata(sql.FieldContainsFold(FieldCid, v))
}

// ImageEQ applies the EQ predicate on the "image" field.
func ImageEQ(v string) predicate.Metadata {
	return predicate.Metadata(sql.FieldEQ(FieldImage, v))
}

// ImageNEQ applies the NEQ predicate on the "image" field.
func ImageNEQ(v string) predicate.Metadata {
	return predicate.Metadata(sql.FieldNEQ(FieldImage, v))
}

// ImageIn applies the In predicate on the "image" field.
func ImageIn(vs ...string) predicate.Metadata {
	return predicate.Metadata(sql.FieldIn(FieldImage, vs...))
}

// ImageNotIn applies the NotIn predicate on the "image" field.
func ImageNotIn(vs ...string) predicate.Metadata {
	return predicate.Metadata(sql.FieldNotIn(FieldImage, vs...))
}

// ImageGT applies the GT predicate on the "image" field.
func ImageGT(v string) predicate.Metadata {
	return predicate.Metadata(sql.FieldGT(FieldImage, v))
}

// ImageGTE applies the GTE predicate on the "image" field.
func ImageGTE(v string) predicate.Metadata {
	return predicate.Metadata(sql.FieldGTE(FieldImage, v))
}

// ImageLT applies the LT predicate on the "image" field.
func ImageLT(v string) predicate.Metadata {
	return predicate.Metadata(sql.FieldLT(FieldImage, v))
}

// ImageLTE applies the LTE predicate on the "image" field.
func ImageLTE(v string) predicate.Metadata {
	return predicate.Metadata(sql.FieldLTE(FieldImage, v))
}

// ImageContains applies the Contains predicate on the "image" field.
func ImageContains(v string) predicate.Metadata {
	return predicate.Metadata(sql.FieldContains(FieldImage, v))
}

// ImageHasPrefix applies the HasPrefix predicate on the "image" field.
func ImageHasPrefix(v string) predicate.Metadata {
	return predicate.Metadata(sql.FieldHasPrefix(FieldImage, v))
}

// ImageHasSuffix applies the HasSuffix predicate on the "image" field.
func ImageHasSuffix(v string) predicate.Metadata {
	return predicate.Metadata(sql.FieldHasSuffix(FieldImage, v))
}

// ImageEqualFold applies the EqualFold predicate on the "image" field.
func ImageEqualFold(v string) predicate.Metadata {
	return predicate.Metadata(sql.FieldEqualFold(FieldImage, v))
}

// ImageContainsFold applies the ContainsFold predicate on the "image" field.
func ImageContainsFold(v string) predicate.Metadata {
	return predicate.Metadata(sql.FieldContainsFold(FieldImage, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Metadata {
	return predicate.Metadata(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Metadata {
	return predicate.Metadata(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Metadata {
	return predicate.Metadata(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Metadata {
	return predicate.Metadata(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Metadata {
	return predicate.Metadata(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Metadata {
	return predicate.Metadata(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Metadata {
	return predicate.Metadata(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Metadata {
	return predicate.Metadata(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Metadata {
	return predicate.Metadata(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Metadata {
	return predicate.Metadata(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Metadata {
	return predicate.Metadata(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Metadata {
	return predicate.Metadata(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Metadata {
	return predicate.Metadata(sql.FieldContainsFold(FieldDescription, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Metadata {
	return predicate.Metadata(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Metadata {
	return predicate.Metadata(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Metadata {
	return predicate.Metadata(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Metadata {
	return predicate.Metadata(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Metadata {
	return predicate.Metadata(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Metadata {
	return predicate.Metadata(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Metadata {
	return predicate.Metadata(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Metadata {
	return predicate.Metadata(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Metadata {
	return predicate.Metadata(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Metadata {
	return predicate.Metadata(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Metadata {
	return predicate.Metadata(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Metadata {
	return predicate.Metadata(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Metadata {
	return predicate.Metadata(sql.FieldContainsFold(FieldName, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Metadata {
	return predicate.Metadata(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Metadata {
	return predicate.Metadata(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Metadata {
	return predicate.Metadata(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Metadata {
	return predicate.Metadata(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Metadata {
	return predicate.Metadata(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Metadata {
	return predicate.Metadata(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Metadata {
	return predicate.Metadata(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Metadata {
	return predicate.Metadata(sql.FieldLTE(FieldCreatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Metadata {
	return predicate.Metadata(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Metadata {
	return predicate.Metadata(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Metadata {
	return predicate.Metadata(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Metadata {
	return predicate.Metadata(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Metadata {
	return predicate.Metadata(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Metadata {
	return predicate.Metadata(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Metadata {
	return predicate.Metadata(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Metadata {
	return predicate.Metadata(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Metadata {
	return predicate.Metadata(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Metadata {
	return predicate.Metadata(sql.FieldNotNull(FieldDeletedAt))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Metadata) predicate.Metadata {
	return predicate.Metadata(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Metadata) predicate.Metadata {
	return predicate.Metadata(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Metadata) predicate.Metadata {
	return predicate.Metadata(sql.NotPredicates(p))
}
